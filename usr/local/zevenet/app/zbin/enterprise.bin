#!/usr/bin/perl
###############################################################################
#
#    Zevenet Software License
#    This file is part of the Zevenet Load Balancer software package.
#
#    Copyright (C) 2014-today ZEVENET SL, Sevilla (Spain)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

use strict;
use warnings;

use Time::Local;
use Zevenet::Log;
use Zevenet::Debug;
use Zevenet::Config;
use Zevenet::Validate;
use Zevenet::SystemInfo;
use Crypt::CBC;
use POSIX 'strftime';

my $SYMKEY   = "1135628147310";
my $lib_path = '/usr/share/perl5';
my $module   = shift @ARGV;

# check module name provided
unless ( $module )
{
	print STDERR "enterprise.bin: missing operand
Try 'enterprise.bin --help' for more information.\n";

	exit 1;
}

# command help and usage instructions
if ( $module =~ /^(?:-h|-help|--help)$/ )
{
	print "Usage: enterprise.bin [enc] MODULE [FUNCTION]
Encrypt or decrypt Zevenet Module.

Encryption
Example:\tenterprise.bin enc Zevenet::API31::System::Cluster

Writes the module encrypted in the same path as the .pm module with extension .pme

Decryption
Example:\tenterprise.bin Zevenet::API31::System::Cluster get_cluster < JSONFILE

Run encrypted module accepting arguments from STDIN in JSON format, returning JSON output.
";

	exit 0;
}



## Required conditions

# check function name provided
my $func = shift @ARGV;
unless ( $func )
{
	die "$0: No API function name received.";
}



## Activation certificate

# check if the activation certificate is valid
my $hostname = &getHostname();
my $basedir = &getGlobalConfiguration('basedir');

my $skip_cert_check = (    $module =~ /Zevenet::API3\d::Certificate::Activation/
						&& $func   eq 'upload_activation_certificate' );

unless ( $skip_cert_check )
{
	my $swcert = &certcontrol();

	if ( $swcert > 0 )
	{
		die "$0: Invalid activation certificate ($swcert)";
	}
}



## Module. Find, decrypt and load the module

# validate module
my $mod_path = "$lib_path/$module.pm";
$mod_path =~ s#\:\:#\/#g; # Replace :: with /
my $emod_path = "${mod_path}e";

my $code;

if ( -f $mod_path )
{
	$code = `cat ${mod_path}`;
}
elsif ( -f $emod_path )
{
	my $cmd = "openssl aes-256-cbc -d -a -nosalt -k \"${SYMKEY}\" -in ${emod_path}";
	$cmd .= " -md md5" if `uname -r` =~ /^4.9/;

	$code = `$cmd`;
}
else
{
	my $msg = "Module file $module not found.";
	&zenlog( $msg );
	die $msg;
}

# load module
eval $code;

if ( $@ )
{
	&zenlog( "### Module path:   $mod_path" );
	&zenlog( "### E-Module path: $emod_path" );
	&zenlog( "### Module name:   $module" );
	&zenlog( $@ );
	die $@;
}



## Function. Check the function is in the module, load params from input in JSON

# check if the function is available
unless ( grep { /^sub $func(?:\W|$)/ } split( '\n', $code ) )
{
	die "$0: API function $func definition not found";
}



# Arguments. Passed from STDIN as a JSON string
# Load Input, then Decode JSON from intput string

# get input for api function
my $input;
{
	local $/ = undef;
	$input = <STDIN>;
}

# my $input_l = length $input;
# unless ( $input_l >= 2 )
# { &zenlog("Function args input length: Not enough characters. Failed!" ); }
# &zenlog( "#### Function input: $input" ) if $input ne '["1"]';

# decode JSON
require Zevenet::API31::HTTP;
require JSON;
JSON->import();

# decode input into data reference
my $args;
if ( eval { $args = decode_json( $input ); } )
     { 1 || &zenlog( "#### Function input JSON decode: [OK]" ); } ####
else { &zenlog( "#### Function input JSON decode: Failed!" ); } ####



## Run call

# make code reference from function name
my $code_ref = \&{ $func };
my $returned_value;

# call api request function
eval { $returned_value = $code_ref->( @{ $args } ) };
if ( $@ )
{
	&zenlog( "#### Function run $func: Failed!" );
	&zenlog( $@ );
	die $@;
}

unless ( defined $returned_value ) { &zenlog( "#### Function output defined: Failed!" ); } ####

my $output;

if ( ref $returned_value )
{
	## Proccess output

	# Encode output in JSON and print it
	my $json = JSON->new();

	#~ unless ( eval { $json_out = encode_json( $returned_value ); } )
	unless ( eval { $output = $json->pretty->indent->canonical->encode( $returned_value ); } )
	{ &zenlog( "#### Function output JSON encode: Failed!" ); }

	# Optionally send JSON to system log
	#~ &zenlog( "json: '$_'" ) for split ( /\\n/, $output );
}
else
{
	$output = $returned_value;
}

# Send Output to STDOUT
print $output;

# Send memory usage info to system log
if ( &debug() )
{
	my $msg = "MODULE: $module FUNCTION: $func " . &getMemoryUsage();

	&zenlog( $msg );
}

exit 0;


### Activation certificate code ############
use Time::Local;
use Zevenet::Config;
use Zevenet::SystemInfo;

##build CBC Object
sub buildcbc
{
	my $cipher = Crypt::CBC->new(
		-literal_key => 1,
		-key => 'wg2kx8VY2NVYDdQSAdqffmHYMd2d97ypYdJ4hwczAm8YBPtHv28EJJ66',
		-cipher => 'Blowfish',
		-iv => 'r5JLLw4f',
		-header => 'none',
		-padding => 'null'
	);

	return $cipher;
}

#encrypt CBC and return result
sub encrypt # string for encrypt
{
	my $data = shift;

	my $cipher = &buildcbc();
	my $result = $cipher->encrypt_hex($data);

	return $result;
}

sub decrypt # string for decrypt
{
	my $data = shift;

	my $cipher = &buildcbc();
	my $result = $cipher->decrypt_hex($data);

	return $result;
}

# build local key
sub keycert
{
	#~ use Zevenet::SystemInfo;

	my $dmi      = &get_sys_uuid();
	my $hostname = &getHostname();
	my $mod_appl = &get_mod_appl();

	my $key = "$hostname::$dmi::$mod_appl";
	my $str = &encrypt($key);

	return $str;
}

# evaluate certificate
sub certcontrol
{
	#~ require Time::Local;
	#~ use Zevenet::Config;
	require Zevenet::SystemInfo;

	my $basedir = &getGlobalConfiguration( 'basedir' );
	my $zlbcertfile = "$basedir/zlbcertfile.pem";
	my $swcert = 0;

	if ( ! -e $zlbcertfile )
	{
		#swcert = 1 ==> There isn't certificate
		$swcert = 1;
		return $swcert;
	}
	my $openssl_bin = "/usr/bin/openssl";
	my $keyid       = "4B:1B:18:EE:21:4A:B6:F9:76:DE:C3:D8:86:6D:DE:98:DE:44:93:B9";
	my @months      = qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);
	my $hostname    = &getHostname();
	my $key         = &keycert();
	my $dmi 		= &get_sys_uuid();
	my $mod_appl	= &get_mod_appl();

	my @zen_cert    = `$openssl_bin x509 -in $zlbcertfile -noout -text 2>/dev/null`;

	my ($subject) = grep( /^\s+Subject: /, @zen_cert );
	my $serial = `$openssl_bin x509 -in $zlbcertfile -serial -noout`;
	$serial =~ /serial\=(\w+)/;
	$serial = $1;
	&zenlog("Serial: $serial");

	my $key_decrypy = &decrypt($key);
	my @data_key = split /::/, $key_decrypy;

	my @type_cert_array = grep /C ?= ?(DE|TE)\,/, @zen_cert;
	$type_cert_array[0] =~ /C ?= ?(DE|TE)\,/;
	my $type_cert = $1;
	&zenlog("Type cert: $type_cert");

	if (    ( !grep /$key/, @zen_cert )
		 || ( !grep /CN=$hostname\/|CN = $hostname\,/, @zen_cert )
		 || ( !grep /$hostname/, $data_key[0] )
		 || ( !grep /$dmi/, $data_key[1] )
		 || ( !grep /$mod_appl/, $data_key[2] ))
	{
		#swcert = 5 ==> Cert isn't valid
		$swcert = 5;
		return $swcert;

	}
	elsif ( ! grep( /keyid:$keyid/, @zen_cert ) )
	{
		#swcert = 2 ==> Cert isn't signed OK
		$swcert = 2;
		return $swcert;
	}

	# Verify date of check
	my $date_today = strftime "%F", localtime;
	my $date_encode = &encrypt($date_today);
	$date_encode =~ s/\s*$//;
#	&zenlog("Date today: $date_today\n Date today encode: $date_encode");

	my $configdir = &getGlobalConfiguration( 'configdir' );
	my $file_check = "$configdir/config_check";
	my $date_check = `cat $file_check`;
	$date_check =~ s/\s*$//;
#	&zenlog("Date check encode: $date_check\n Date check decode: $last_date_check");

	if ($date_check ne $date_encode) {
		my $crl_path = "$configdir/cacrl.crl";

		my $date_mod = `stat -c%y $crl_path`;
		my @modification = split /\ /, $date_mod;

		if ( $modification[0] ne $date_today) {
			# Download CRL
	  		my $download = `wget -q -O $crl_path https://devcerts.zevenet.com/pki/ca/index.php?stage=dl_crl`;
	  		&zenlog("CRL Downloaded on $date_today");
	  	}

		my @decoded = `openssl crl -inform DER -text -noout -in $crl_path`;
		if ( !grep /keyid:$keyid/, @decoded ) {
			#swcert = 2 ==> Cert isn't signed OK
			$swcert = 2;
			return $swcert;
		}

		foreach my $line (@decoded) {
			if (grep /Serial Number\: ?$serial/, $line) {
				my $isRevoked = grep /Serial Number\: ?$serial/, $line;
				if ($isRevoked > 0) {
					&zenlog("Certificate Revoked (CRL check)");
					$swcert = 4;
					return $swcert;
				}
			}
		}
		require Tie::File;
		tie my @contents, 'Tie::File', "$file_check";
		@contents = ($date_encode);

		untie @contents;
	}

	# Certificate expiring date
	my ( $na ) = grep /Not After/i, @zen_cert;
	$na =~ s/.*not after.*:\ //i;

	my ( $month, $day, $hours, $min, $sec, $year ) = split /[ :]+/, $na;
	( $month ) = grep { $months[$_] eq $month } 0..$#months;
	my $end = timegm( $sec, $min, $hours, $day, $month, $year );

	my $dayright = ( $end - time () ) / 86400;

	if ( $dayright < 0 )
	{
		#control errors
		if ( $type_cert eq 'TE' )
		{
			# Policy: expired testing certificates would not stop zen service,
			# but rebooting the service would not start the service,
			# interfaces should always be available.
			$swcert = 3;
		}

		if ( $type_cert eq 'DE' )
		{
			# The contract support plan is expired you have to request a
			# new contract support. Only message alert!
			$swcert = -1;
		}
	}

	# error codes
	#swcert = 0 ==> OK
	#swcert = 1 ==> There isn't certificate
	#swcert = 2 ==> Cert isn't signed OK
	#swcert = 3 ==> Cert test and it's expired
	#swcert = 4 ==> Cert is revoked
	#swcert = 5 ==> Cert isn't valid

	#swcert = -1 ==> Cert support and it's expired

	#output
	&zenlog("Paso enterpirse.bin swcert: $swcert");
	return $swcert;
}

sub checkActivationCertificate
{
	my $swcert = &certcontrol();

	# if $swcert is greater than 0 zapi should not work
	if ( $swcert > 0 )
	{
		my $msg;

		if ( $swcert == 1 )
		{
			$msg =
			  "There isn't a valid Zevenet Load Balancer certificate file, please request a new one";
		}
		elsif ( $swcert == 2 )
		{
			$msg =
			  "The certificate file isn't signed by the Zevenet Certificate Authority, please request a new one";
		}
		elsif ( $swcert == 3 )
		{
			# Policy: expired testing certificates would not stop zen service,
			# but rebooting the service would not start the service,
			# interfaces should always be available.
			$msg =
			  "The Zevenet Load Balancer certificate file you are using is for testing purposes and its expired, please request a new one";
		}
		elsif ( $swcert == 4 )
		{
			$msg =
			  "The Zevenet Load Balancer certificate file has been revoked, please request a new one";
		}
		elsif ( $swcert == 5 )
		{
			$msg =
			  "The Zevenet Load Balancer certificate file isn't valid for this machine.";
		}

		my $body = {
					 message         => $msg,
					 certificate_key => &keycert(),
					 hostname        => &getHostname(),
		};

		return &httpResponse( { code => 403, body => $body } );
	}

	return $swcert;
}

sub get_sys_uuid
{
	my ( $dmi ) = grep ( /UUID\:/, `/usr/sbin/dmidecode` );
	( undef, $dmi ) = split ( /:\s+/, $dmi );

	chomp $dmi;

	return $dmi;
}

sub get_mod_appl
{
	my @mod = grep ( /\w{3} ?\d{4}/, `cat /etc/zevenet_version` );
	$mod[0] =~ /(\w{3} ?\d{4})/;

	my $mod_appl = $1;
	$mod_appl =~ s/ //;

	return $mod_appl;
}
