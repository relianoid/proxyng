#!/bin/bash

# load global.conf variables
if [ -f "/usr/local/zevenet/bin/load_global_conf" ];
then
       	source /usr/local/zevenet/bin/load_global_conf
        load_global_conf
else
	echo "I can't find environment variable"
	exit
fi

# check if the activation certificate file exists
if [ ! -f /usr/local/zevenet/www/zlbcertfile.pem ]; then
	echo "There isn't a valid activation certificate, once the activation certificate is applied execute checkupgrades" > $apt_msg
	echo "There isn't a valid activation certificate, once the activation certificate is applied execute checkupgrades"
	exit
fi

# check if APT config is done properly, if not, it tries to configure it
echo "" | /usr/local/zevenet/bin/enterprise.bin Zevenet::Apt setCheckUpgradeAPT >/dev/null

# control errors
function error {
        # Input parameters:
			# $1 = error message
        if [ $? -ne 0 ]; then
		echo "$1"
		exit
        fi
}

# configure apt offline
function setAptOffline {
	# Input parameters
		# $1 = apt Zevenet source

	echo "Checking local update system"
	# create the directory if it does not exist
	if [ ! -d ${update_dir} ]; then
		mkdir ${update_dir}
	fi

	# check if the directory is empty
	cmd=`ls ${update_dir} | wc -l`
	if [ $cmd -eq 0 ]; then
		echo "No packages to update on ${update_dir}"
		exit
	fi

	# get latest ISO update
	last_update=`ls ${update_dir} | sort -V | tail -1 | sed  's/.iso//g'`

	UmountMountPoint
	mkdir /media/${last_update}
	mount -o loop ${update_dir}/${last_update}.iso /media/${last_update} 2>/dev/null
	error "Error trying to mount ISO ${update_dir}/${last_update}.iso in /media/${last_update}"

	# add apt key
	if [ ! -f /media/${last_update}/${gpg_key_zevenet} ]; then
		echo "Not public key found in the ${last_update}"
		exit
	fi
	cat /media/${last_update}/${gpg_key_zevenet} | apt-key add -

	# add source list
	echo "deb file:///media/${last_update} buster main" > ${1}

	return 0
}

# Unmount apt
function UmountMountPoint {

	mountpoint="/media/update"

	# check mount point
	check_mountpoint=`mount | grep ${mountpoint}.* | awk '{print $3}' | wc -l`
	# check deleted ISO
	mount | grep ${mountpoint}.* | grep "(deleted)" >/dev/null
	# get the name of the mount point
	if [ $? -eq 0 ]; then
		mountpoint_name=`mount | grep ${mountpoint}.* | awk '{print $4}'`
	else
		mountpoint_name=`mount | grep ${mountpoint}.* | awk '{print $3}'`
	fi

	if [ ${check_mountpoint} -ne 0 ]; then
		umount ${mountpoint_name}
		error "Error while trying to unmount drive the ${mountpoint_name}"
		rm -rf ${mountpoint_name}
	fi

	return 0
}

case "$1" in
'')
	# test connection with zevenet update system
	$netcat_bin -z www.zevenet.com 443 2>/dev/null
	if [ $? != 0 ]; then
		echo "Error connecting to Zevenet Update System, check connection to https://repo.zevenet.com"
		setAptOffline $apt_source_zevenet
	else
		UmountMountPoint
	fi

	$aptget_bin update > /dev/null

	# check if there are upgradable packages
	packages=`$apt_bin list --upgradable 2>/dev/null | awk 'FNR > 1' | wc -l`
	if [ $packages \> 0 ]
	then
		echo "$packages package(s) require upgrade"
		echo "To upgrade, execute: apt-get --with-new-pkgs upgrade"
		echo "last check at `date` - $packages package(s) require upgrade, update this information with: checkupgrades" > $apt_msg
		echo "To upgrade, execute: apt-get --with-new-pkgs upgrade" >> $apt_msg
		$apt_bin list --upgradable 2>/dev/null | cut -d"/" -f 1  | sed '1d' | tr  '\n' ' ' > $apt_outdated_list
	else
		echo "Zevenet Packages are up-to-date."
		echo "Zevenet Packages are up-to-date." > $apt_msg
		echo "" > $apt_outdated_list
    fi
;;

'-n')
	# Displays number non-updated packages
	number=`$apt_bin list --upgradable 2>/dev/null | awk 'FNR > 1' | wc -l`
	echo "$number"
;;

'-l')
	# Displays a list of non-updated packages
	$apt_bin list --upgradable 2>/dev/null | awk 'FNR > 1'
;;

'-help')
	echo "Usage:	checkupgrades"
	echo "	checkupgrades name-pkg"
	echo "	checkupgrades [options]"
	echo ""
	echo "checkupgrades provides informations about packages."
	echo ""
	echo "Options:"
	echo ""
	echo "  -n			displays number non-updated packages"
	echo "  -l			displays a list of non-updated packages"
	echo "  -help			display this help"
	echo ""
;;

*)
	#Check the status of a package
	$dpkg_bin -l | grep $1 | awk {'print $2'} | grep $1$ > /dev/null
	if [ $? = 0 ];
	then
		installed=`$aptcache_bin policy $1 | head -2 | tail -1 | cut -d ":" -f2 | sed 's/ //g'`
		candidate=`$aptcache_bin policy $1 | head -3 | tail -1 | cut -d ":" -f2 | sed 's/ //g'`
		if [ "$installed" != "$candidate" ];
		then
			echo "There is a new version of $1"
			echo "installed = $1 $installed"
			echo "candidate = $1 $candidate"
		else
			echo "$1 is already in the newest version $installed"
		fi
	else
		echo "$1 it is not installed in the system"
	fi
;;
esac
