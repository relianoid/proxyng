#!/usr/bin/perl

if ( $ARGV[0] =~ /cl_maintenance/ or $ARGV[0] =~ /^lo$/ )
{
	&zenlog( "$ARGV[0] is not managed by netplug", "warning", "NETWORK" );
	exit;
}

use strict;
use warnings;
use Zevenet::Log( 'zenlog' );

my $iface = $ARGV[0];
my $gateway;

if ( $iface =~ /^$/ )
{
	&zenlog( "Network config called without interface arg", "error", "NETWORK" );
	exit 1;
}

use Zevenet::Config;
use Zevenet::Net::Core;
use Zevenet::Net::Interface;
use Zevenet::Net::Route;

my $eload;
if ( eval { require Zevenet::ELoad; } )
{
	$eload = 1;
}

&zenlog( "Call to Network configuration through netplugd for $iface",
		 "info", "NETWORK" );
my $if_ref = &getInterfaceConfig( $iface );

#if interface is not configured in UP mode then exit.
if ( $if_ref->{ status } ne 'up' )
{
	&zenlog( "Interface $iface is not configured to be started",
			 "warning", "NETWORK" );
	exit 1;
}

if ( $if_ref->{ dhcp } ne 'true' )
{

	&addIp( $if_ref ) if $if_ref->{ ip_addr };

	#if nic is used for global gw the apply global routes
	if ( &getGlobalConfiguration( 'defaultgwif' ) eq $if_ref->{ name } )
	{
		&zenlog( "Applying default GW for table main", "info", "NETWORK" );
		$gateway = &getGlobalConfiguration( 'defaultgw' );
		&applyRoutes( 'global', $if_ref, $gateway );
	}

	#finally apply local routes
	&applyRoutes( 'local', $if_ref );
	&setIfacesUp( $if_ref->{ name }, "vini" );

}

#Check cluster
#if dev interface is part of cluster, then get up the cl_maintenance
if ( $eload )
{
	my $maintenance_enabled =
	  &eload( module => 'Zevenet::Cluster', func => 'getClMaintenanceManual', );
	exit if ( $maintenance_enabled eq "true" );

	my $zcl_conf = &eload( module => 'Zevenet::Cluster',
						   func   => 'getZClusterConfig', );

	my $if_ref_cl = &getSystemInterface( "cl_maintenance" );

	#if cl_maintenande is down then the start is needed.
	if (     exists $zcl_conf->{ _ }->{ interface }
		 and $zcl_conf->{ _ }->{ interface } eq $iface
		 and $if_ref_cl->{ status } eq "down" )
	{
		&zenlog( "Cluster interface recovered the link, enabling cl_maintenance",
				 "info", "NETWORK" );
		my $ip_bin   = &getGlobalConfiguration( 'ip_bin' );
		my $maint_if = 'cl_maintenance';
		my $clstatus = &eload( module => 'Zevenet::Cluster',
							   func   => 'getZClusterNodeStatus', );
		$clstatus = "backup";
		my $set_clstatus = &eload(
								   module => 'Zevenet::Cluster',
								   func   => 'setZClusterNodeStatus',
								   args   => [$clstatus],
		);
		&logAndRun( "$ip_bin link set $maint_if up" );
		my $remote_node_status = &eload( module => 'Zevenet::Cluster',
										 func   => 'getZClusterRemoteNodeStatus' );

		if ( $remote_node_status =~ /master/ )
		{
			my $config_changed;
			my $remote_global = &eload( module => 'Zevenet::Cluster',
										func   => 'getZClusterRemoteSystemGlobal' );
			my $local_global = &eload( module => 'Zevenet::System::Global',
									   func   => 'getSystemGlobal' );
			$config_changed->{ duplicated_network } = $remote_global->{ duplicated_network }
			  if (
				 $local_global->{ duplicated_network } ne $remote_global->{ duplicated_network }
			  );
			$config_changed->{ proxy_new_generation } =
			  $remote_global->{ proxy_new_generation }
			  if ( $local_global->{ proxy_new_generation } ne
				   $remote_global->{ proxy_new_generation } );
			$config_changed->{ ssyncd } = $remote_global->{ ssyncd }
			  if ( $local_global->{ ssyncd } ne $remote_global->{ ssyncd } );
			my $configdir        = &getGlobalConfiguration( 'configdir' );
			my $zcluster_manager = &getGlobalConfiguration( 'zcluster_manager' );
			use Zevenet::File;
			my $old_conf_md5 = &getFileChecksumMD5( $configdir );
			my $master_host = &eload( module => 'Zevenet::Cluster',
									  func   => 'getZClusterRemoteHost' );
			my $master_ip = $zcl_conf->{ $master_host }->{ ip };
			&eload(
					module => 'Zevenet::Cluster',
					func   => 'runRemotely',
					args   => ["$zcluster_manager sync", $master_ip]
			);

			my $new_conf_md5 = &getFileChecksumMD5( $configdir );
			my $files_changed = &getFileChecksumAction( $old_conf_md5, $new_conf_md5 );
			if ( $files_changed )
			{
				$files_changed = &eload(
										 module => 'Zevenet::Cluster',
										 func   => 'getZClusterConfigChangedStruct',
										 args   => [$files_changed]
				);

				$config_changed =
				  $config_changed
				  ? { %{ $config_changed }, %{ $files_changed } }
				  : $files_changed;
			}

			&eload(
					module => 'Zevenet::Cluster',
					func   => 'runZClusterUpdateConfig',
					args   => [$config_changed]
			) if $config_changed;

			&eload( module => 'Zevenet::Cluster',
					func   => 'enableZCluster' );
		}
	}
}

#TODO: Now apply static routes, they are saved in routing.conf
