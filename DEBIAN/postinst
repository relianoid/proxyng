#!/bin/bash
###############################################################################
#
#    Zevenet Software License
#    This file is part of the Zevenet Load Balancer software package.
#
#    Copyright (C) 2014-today ZEVENET SL, Sevilla (Spain)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

BM_tag=0 # _BM_tag_


[ ! "$1" == "configure" ] && echo "Installation aborted $1 $2" && exit 1
[ "$1" == "configure" ] && echo "Completing the Zevenet installation..."


# upgrading global.conf
/usr/local/zevenet/bin/checkglobalconf

# load LB variables
source ./usr/local/zevenet/bin/load_global_conf.sh
load_global_conf

GLOBALCF=$globalcfg
GLOBALCFT=$globalcfg_tpl


# create Web server
if [ ! -f "$http_server_cert" ]; then
	cp -rf $http_server_cert_tpl $http_server_cert
fi
if [ ! -f "$http_server_key" ]; then
	cp -rf $http_server_key_tpl $http_server_key
fi


# link l4xnat with iptables or nftables
if [ -d "/usr/share/perl5/Zevenet/Farm/L4xNAT" ]; then
	rm -rf "/usr/share/perl5/Zevenet/Farm/L4xNAT"
fi
if [ ! -e "/usr/share/perl5/Zevenet/Farm/L4xNAT" ]; then
	ln -sf /usr/share/perl5/Zevenet/Farm/L4ipt /usr/share/perl5/Zevenet/Farm/L4xNAT
fi
# Check for binaries
PERLVER=`dpkg -l perl | grep perl | cut -d. -f-2 | xargs | cut -d\  -f3`
compiled_files=(
	$zbindir/zevenet
	$zbindir/enterprise.bin
)
for i in ${compiled_files[@]}
do
	if [ -e ${i}.${PERLVER} ]; then
		mv ${i}.${PERLVER} ${i}
		rm ${i}.*
	fi
done


# Enable root access through SSH
SSHDCONFIG="/etc/ssh/sshd_config"
if [[ `grep -c "^PermitRootLogin.*yes" $SSHDCONFIG` == '0' ]]; then
	sed -i -e 's/^PermitRootLogin.*/PermitRootLogin yes/' $SSHDCONFIG
	/etc/init.d/ssh reload 2> /dev/null
fi

# Set crontab
if [ ! -f /etc/cron.d/zevenet ]; then
	cp $cron_tpl $cron_conf
	$cron_service restart
fi


# Disable conntrackd stats
sed -i '/Stats/,/}/d' /etc/conntrackd/conntrackd.conf 2>/dev/null
# Delete old conntrackd-stats logs
rm -rf /var/log/conntrackd-stats* 2>/dev/null

## Disable services

# SNMP services
if [[ -f $snmpdconfig_file && `grep -c '#zenlb' $snmpdconfig_file` == '0' ]]; then
	cp $snmpdconfig_tpl $snmpdconfig_file
fi
if [[ `grep -c 'Lsd' /etc/default/snmpd` == '1' ]]; then
        sed -i -e 's/Lsd/LS6d/' /etc/default/snmpd
fi

# Disable systemd-sysctl
systemctl disable systemd-sysctl
systemctl mask systemd-sysctl.service
systemctl daemon-reload

# Disable apt-daily.timer
systemctl stop apt-daily.timer
systemctl disable apt-daily.timer
systemctl mask apt-daily.service
systemctl daemon-reload

# Disable OpenVZ (arpsend)
systemctl stop vz
systemctl disable vz 2>/dev/null
systemctl mask vz.service
systemctl daemon-reload

# Disable vzeventd
systemctl stop vzeventd
systemctl disable vzeventd 2>/dev/null
systemctl mask vzeventd.service
systemctl daemon-reload

# sec service for zevenet notifications
if [ -f /bin/systemctl ]
then
	systemctl stop sec 2>/dev/null
	systemctl disable sec 2>/dev/null
	systemctl stop systemd-timesyncd 2>/dev/null
	systemctl disable systemd-timesyncd 2>/dev/null
else
	/etc/init.d/sec stop > /dev/null
	insserv -r sec
fi

# keepalived service for zevenet cluster
if [ -f /bin/systemctl ]
then
	systemctl disable keepalived 2>/dev/null
else
	insserv -r keepalived
fi

# Do not load init-functions on keepalived service
# This allows keepalived to stop correctly
sed -i -e 's!^. /lib/lsb/init-functions!#. /lib/lsb/init-functions!' /etc/init.d/keepalived
sed -i -e 's!\slog_!: #log_!' /etc/init.d/keepalived

# boot dependencies
sed -i 's/^\# Required-Start:.*/# Required-Start:\t\$remote_fs \$syslog zevenet/g' /etc/init.d/ssh
sed -i 's/^\# Required-Stop:.*/# Required-Stop:\t\$remote_fs \$syslog zevenet/g' /etc/init.d/ssh

# Move zlb-stop & zlb-start
if [ ! -f $zlb_start_script ]; then
	cp $zlb_start_tpl $zlb_start_script
fi
if [ ! -f $zlb_stop_script ]; then
	cp $zlb_stop_tpl $zlb_stop_script
fi


# Disable DNS resolution for SSH service
if [ -f $zbindir/ssh_nodns.sh ]; then
	$zbindir/ssh_nodns.sh
fi

# Create IPDS directories
if [ $BM_tag -eq 0 ]; then
	$zbindir/boot_ipds
fi

# Remove residual cluster DROP(s) on ip6tables
if [ $BM_tag -ne 0 ]; then
	ip6tables -F INPUT 2>/dev/null
fi

# Apply all migrating scripts to zevenet
if [ $BM_tag -ne 0 ]; then
	#migrating config files
	MIG_DIR="/usr/local/zevenet/migrating/"
	for SCRIPT in `ls $MIG_DIR`; do ${MIG_DIR}$SCRIPT; done
fi

if [ $BM_tag -eq 0 ]; then
	# restarting zevenet service
	echo "Zevenet will be unavailable while the service is restarting."
	/etc/init.d/zevenet stop
	/etc/init.d/zevenet start
fi

# Load conntrack modules
/sbin/modprobe nf_conntrack 2> /dev/null
/sbin/modprobe ip_conntrack 2> /dev/null

# Add Zevenet services to boot process including dependencies
update-rc.d zevenet defaults

# Link zenbui
if [ -f $zbindir/zenbui ];
then
	rm /usr/bin/zenbui 2>/dev/null
	ln -sf $zbindir/zenbui /usr/bin/zenbui
fi

# copy rbac roles template to config if they do not exist
TMPROLE="/usr/local/zevenet/share/rbac_roles"
CONFROLE="/usr/local/zevenet/config/rbac/roles"
for i in `ls $TMPROLE`
do
	FILE=`echo $i | sed "s,$TMPROLE,,"`
	if [ ! -f "${CONFROLE}/$FILE" ]
	then
		cp "$TMPROLE/$FILE" "$CONFROLE/$FILE"
	fi
done

#Change prompt color
sed -i "s/1;30m/0;37m/g" /etc/bash.bashrc 2> /dev/null

if [ $BM_tag -eq 1 ]; then
	#Flush apt sources
	echo > /etc/apt/sources.list

	echo "Zevenet Load Balancer installed..."
else
	echo "Zevenet Load Balancer update completed..."
fi
