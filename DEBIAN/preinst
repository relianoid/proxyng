#!/usr/bin/perl 
###############################################################################
#
#    Zevenet Software License
#    This file is part of the Zevenet Load Balancer software package.
#
#    Copyright (C) 2014-today ZEVENET SL, Sevilla (Spain)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

use File::Copy 'move';
use Crypt::CBC;

my $openssl_bin   = "/usr/bin/openssl";
my $dmidecode_bin = "/usr/sbin/dmidecode";
my $keyid = "4B:1B:18:EE:21:4A:B6:F9:76:DE:C3:D8:86:6D:DE:98:DE:44:93:B9";
my $hostname = `hostname`;

require "/usr/local/zevenet/config/global.conf";
my $basedir = "/usr/local/zevenet/www";

##build CBC Object
sub buildcbc
{
	my $cipher = Crypt::CBC->new(
		-literal_key => 1,
		-key => 'wg2kx8VY2NVYDdQSAdqffmHYMd2d97ypYdJ4hwczAm8YBPtHv28EJJ66',
		-cipher => 'Blowfish',
		-iv => 'r5JLLw4f',
		-header => 'none',
		-padding => 'null'
	);

	return $cipher;
}

#encrypt CBC and return result
sub encrypt # string for encrypt
{
	my $data = shift;

	my $cipher = &buildcbc();
	my $result = $cipher->encrypt_hex($data);

	return $result;
}

sub decrypt # string for decrypt
{
	my $data = shift;

	my $cipher = &buildcbc();
	my $result = $cipher->decrypt_hex($data);

	return $result;
}
# build local key
sub keycert
{
	my @dmidec  = `$dmidecode_bin`;
	my @dmidec2 = grep ( /UUID\:/, @dmidec );
	my $dmi     = @dmidec2[0];
	$dmi =~ s/\"//g;
	$dmi =~ s/^\s+//;
	$dmi =~ s/\s+$//;

	$dmi =~ s/\ //g;
	my @dmidec3 = split ( ":", $dmi );
	$dmi = @dmidec3[1];

	$hostname =~ s/\"//g;
	$hostname =~ s/^\s+//;
	$hostname =~ s/\s+$//;
	print "Hostname=$hostname\n";

	my @mod = grep ( /\w{3} ?\d{4}/, `cat /etc/zevenet_version` );
	$mod[0] =~ /(\w{3} ?\d{4})/;
	my $mod_appl = $1;
	$mod_appl =~ s/ //;

	my $key = "$hostname::$dmi::$mod_appl";
	my $str = &encrypt($key);

	return $str;
}

sub keycert_old
{
	my $dmi     = &get_sys_uuid();

	$hostname =~ s/\"//g;
	$hostname =~ s/^\s+//;
	$hostname =~ s/\s+$//;
	print "Hostname=$hostname\n";

	$n = 2;
	$encrypted_string  = crypt ( "${dmi}${hostname}", "93" );
	$encrypted_string =~ s/^93//;
	$encrypted_string2 = crypt ( "${hostname}${dmi}", "a3" );
	$encrypted_string2 =~ s/^a3//;
	$encrypted_string3 = crypt ( "${dmi}${hostname}", "ZH" );
	$encrypted_string3 =~ s/^ZH//;
	$encrypted_string4 = crypt ( "${hostname}${dmi}", "h7" );
	$encrypted_string4 =~ s/^h7//;
	$str =
	  "${encrypted_string}-${encrypted_string2}-${encrypted_string3}-${encrypted_string4}";
	$str =~ s/\"//g;
	$str =~ s/^\s+//;
	$str =~ s/\s+$//;
	print "System Certificate Key=$str\n";
	return $str;
}

sub get_sys_uuid
{
	my ( $dmi ) = grep ( /UUID\:/, `$dmidecode_bin` );
	( undef, $dmi ) = split ( /:\s+/, $dmi );

	chomp $dmi;

	return $dmi;
}

sub get_mod_appl
{
	my @mod = grep ( /\w{3} ?\d{4}/, `cat /etc/zevenet_version` );
	$mod[0] =~ /(\w{3} ?\d{4})/;

	my $mod_appl = $1;
	$mod_appl =~ s/ //;

	return $mod_appl;
}

sub certcontrol
{
	$swcert      = 0;
	$zlbcertfile = "$basedir/zlbcertfile.pem";

	#$key = &keycert();

	my $notbefore;
	my $nb;
	my @notafter;
	my $na;
	my $key = &keycert_old();

	if ( -e $zlbcertfile )
	{
		my @run = `$openssl_bin x509 -in $zlbcertfile -noout -text 2>/dev/null`;

		my @key_cert = grep /Subject: ?.+/, @run;
		$key_cert[0] =~ /Subject: ?.+OU ?= ?([.\/0-9A-Za-z\-]+), ?/;
		my $cert_ou = $1;

		if ($cert_ou eq 'false')
		{
			$key_cert[0] =~ /Subject: ?.+1\.2\.3\.4\.5\.8 ?= ?(.+)/;
			my $cert_ou = $1;
			$key = &keycert();
		}

		if ( !grep /keyid:$keyid/, @run ) {
	        #swcert = 2 ==> Cert isn't signed OK
	        $swcert = 2;
	        print "File Certificate key=$keyid\n";
	        return $swcert;
	    } elsif (( !grep /$key/, @run )
				 || ( !grep (/(CN=$hostname\/|CN = $hostname\,)/, @run)) ) {
	 		#swcert = 5 ==> Cert isn't valid
	       	$swcert = 5;

	       	return $swcert;
	 	}

		my $serial = `$openssl_bin x509 -in $zlbcertfile -serial -noout`;
		$serial =~ /serial\=(\w+)/;
		$serial = $1;	 	

		my $tmpdir = "/tmp/zlb";
		my $crl_path = "$tmpdir/cacrl.crl";

	  	if ( $0 eq '-e' ) {
			my @decoded = `openssl crl -inform DER -text -noout -in $crl_path`;
			if ( !grep /keyid:$keyid/, @decoded ) {
				#swcert = 2 ==> Cert isn't signed OK
				$swcert = 2;
				return $swcert;
			}

			foreach my $line (@decoded) {
				if (grep /Serial Number\: ?$serial/, $line) {
					my $isRevoked = grep /Serial Number\: ?$serial/, $line;
					if ($isRevoked > 0) {
						print "The certificate is revoked\n";
						$swcert = 4;
						return $swcert;
					}
				}
			}
		}

		use Date::Parse;
		use Time::localtime;
		$now       = ctime();
		@notafter = grep /Not After/i, @run;
		$na = join "", @notafter;
		$na =~ s/not after.*:\ //i;
		$end = str2time( $na );

	    my $totaldays = '';
	    my $type_cert = '';

	    	#Certificate with old format
		if ($cert_ou =~ m/-/ ) {
			@notbefore = grep /Not Before/i, @run;
			$nb        = join '', @notbefore;
			$nb =~ s/not before.*:\ //i;
			$ini = str2time( $nb );
			my $totaldays = ( $end - $ini ) / 86400;
			$totaldays =~ s/\-//g;

		} else {
			my $key_decrypy = &decrypt($key);
			my @data_key = split /::/, $key_decrypy;

			my @type_cert_array = grep /C ?= ?(DE|TE)\,/, @run;
			$type_cert_array[0] =~ /C ?= ?(DE|TE)\,/;
			$type_cert = $1;

			my $dmi     = &get_sys_uuid();
			my $mod_appl = &get_mod_appl();

			if (( !grep /$hostname/, $data_key[0] )
				 || ( !grep /$dmi/, $data_key[1] )
				 || ( !grep /$mod_appl/, $data_key[2] ))
			{
				#swcert = 5 ==> Cert isn't valid
				$swcert = 5;
				return $swcert;
			}
		}
		my $dayright = ( $end - time () ) / 86400;
		#control errors
		if ( $dayright < 0 && $swcert == 0 && ( ($totaldays ne '' && $totaldays < 364) || ($totaldays eq '' && $type_cert eq 'TE') ))
		{
			#it is working with test cert and cert is expired. It should goes down
			$swcert = 3;
			print "Demo cert expired, $totaldays < 364 && $dayright < 0 && $swcert == 0\n";
		}

		if ( $dayright < 0 && $swcert == 0 && ( ($totaldays ne '' && $totaldays > 364) || ($totaldays eq '' && $type_cert eq 'DE') ))
		{
			#The contract support plan is expired you have to request a new contract support. Only message alert!
			$swcert = -1;
			print "The contract support plan is expired you have to request a new contract support\n";
		}
	}
	else
	{
		#There isn't certificate in the machine
		$swcert = 1;
	}

	#code errors
	#swcert = 0 ==> OK
	#swcert = 1 ==> There isn't certificate
	#swcert = 2 ==> Cert isn't signed OK
	#swcert = 3 ==> Cert test and it's expired

	return $swcert;
}
# end evaluate certificate

if ( $ARGV[0] eq "install" || $ARGV[0] eq "upgrade" )
{
	my $certerr = &certcontrol();
	if ( $certerr != 0 )
	{
		print "Your certificate key is not valid, error code $certerr\n";
		exit 1;    #Abort deploy
	}
}
else
{
	exit 1;        #Abort deploy
}

# Reset the sysctl in order to establish the new parameters
system ( "cp /etc/sysctl.conf /etc/sysctl.conf.bck" );
system ( qq{grep "^#" /etc/sysctl.conf > /etc/sysctl.conf 2> /dev/null} );

# Bugfix to wheezy version
# put ipset in same directory than stretch and jessie version
my $kernel_version = `uname -r`;
if ( $kernel_version =~ /^3\.2\./ )
{
	my $ipset = "/sbin/ipset";
	system( "ln -s /usr/sbin/ipset $ipset" ) if ( ! -f $ipset );
}

#Move zlb-stop & zlb-start
my $zlbstop = "/usr/local/zevenet/config/zlb-stop";
my $zlbstart = "/usr/local/zevenet/config/zlb-start";
if ( -e $zlbstop )
{
	move $zlbstop, "/tmp/zlb-stop";
}
if ( -e $zlbstart )
{
	move $zlbstart, "/tmp/zlb-start";
}

# Create the new GUI system group
system ( "groupadd -f webgui" );
system ( "usermod -a -G webgui root" );

exit 0;
