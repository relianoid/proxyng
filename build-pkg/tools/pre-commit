#!/usr/bin/env bash
#
# This pre-commit is meant to exit if there is an error when one or more files
# are not using perltidy format with the defined options. To enable the
# automatic use of perltidy when doing a commit, set perltidy_flag to 1.
#


NOWARN=1	# Set 1 using enviroment variables

changed=$(git diff --cached --name-only)
perltidy_flag=1
critic_lvl=0	# 5 is lower value and 1 is the higher value
REJECT=0
include_dir="/build-pkg/tools"
include_file="define_include"
warnings=0

# install from cpan: cpan install warnings::unused
# It depends on make, gcc and libtest-warn-perl
HEADER_CODE='#!/usr/bin/perl
use warnings::unused;use warnings;use strict;sub include { }'

if [[ -z "$changed" ]]; then
    exit 0
fi

if [ $critic_lvl -ne 0 ]; then
	perlcritic_bin=`which perlcritic`
	if [ $? -ne 0 ]; then
		echo "-------------------------------------------------"
		echo "# Perlcritic is required to check the a minimun critic level '$critic_lvl'"
		echo "# Required the Debian package 'libperl-critic-perl'"
		echo "-------------------------------------------------"
		exit 1
	fi
fi


for FILE in $changed; do

	PERLFILE=`head -1 $FILE | grep perl`
	if [ "$PERLFILE" != "" ]; then
		PERLFILE=1
	else
		case "$FILE" in
			*.pl | *.pm ) PERLFILE=1;;
		esac
	fi

	if [ "$PERLFILE" != "" ]; then

		# check perl critic
		if [ $critic_lvl -ne 0 ];then
			perlcritic -$critic_lvl $FILE
			if [ $? -ne 0 ]; then
				echo "-------------------------------------------------"
				echo "# Error: The file $FILE does not pass the perl critic lvl $critic_lvl"
				echo "-------------------------------------------------"
				exit 1
			fi
		fi

		# check perl syntax
		F="/tmp/f_commit"
		echo -e "$HEADER_CODE" > $F
		cat $FILE >> $F
		echo "perl -cw $F 2>&1 >/dev/null | grep -Ev OK"
		OUT=`perl -cw $F 2>&1 >/dev/null | grep -Ev OK`

		if [ "$OUT" != "" ]; then
			echo "-------------------------------------------------"
			echo "# WARNING in the file $FILE: (the lines were moved 2 positions)"
			echo "$OUT"
			echo "-------------------------------------------------"
			warnings=1
		fi

		# check debug msg
		OUT=`grep -i 'ecm|???' $FILE`
		if [ "$OUT" != '' ]; then
			echo "-------------------------------------------------"
			echo "# Error: There is debug message in the file $FILE"
			echo "-------------------------------------------------"
			exit 1
		fi

		# check perltidy
        perltidy_opts="-t -et=4 -bt=0 -bl -sbl -bbvt=0 -pt=0 -sbt=2 -skp -nolq -lp -vt=0 -vtc=0 -vmll"

        org_hash="$(sha256sum "$FILE" | cut -d " " -f 1)"
        tidy_hash="$(perltidy "$FILE" $perltidy_opts -st | sha256sum | cut -d " " -f 1)"

        if [[ "$org_hash" != "$tidy_hash" ]]; then
            if [ $perltidy_flag -eq 0 ]; then
                echo "# Error: perltidy failed for $FILE"
                echo "-------------------------------------------------"
                REJECT=1
            elif [ $perltidy_flag -eq 1 ]; then
				echo "# Applying perltidy for $FILE"
				echo "-------------------------------------------------"
				perltidy "./$FILE" $perltidy_opts
				mv "./$FILE.tdy" "./$FILE"
				git add "./$FILE"
            fi
        fi

        echo ""
        echo ""

    fi
done



if [ $warnings -ne 0 ]; then
	echo "####################################################"
	echo "####################################################"
	echo ""

	echo -n "  ERROR: There are some warnings, type [y] to ignore them: "
	read < /dev/tty

	if [[ $REPLY =~ ^[Yy]$ ]]
	then
		echo "Accepting the blame"
		echo ""
	else
		echo "The commit was cancelled"
		exit 1
	fi
fi


exit $REJECT
